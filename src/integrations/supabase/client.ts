
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://wgnvrxubwifcscrbkimm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndnbnZyeHVid2lmY3NjcmJraW1tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg1MjYxNzAsImV4cCI6MjA1NDEwMjE3MH0.AwaBd1VRrzz_DvvDjJ3Ke7CJFoxl5XUB2chymhueybg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Utility function to remove duplicate transactions from the database
 * This checks for transactions with the same date, description, received_from, payment_type, and amount
 */
export const removeDuplicateTransactions = async () => {
  try {
    // Get the current user
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.error("No authenticated user found");
      return;
    }
    
    // Get all transactions for the current user
    const { data: transactions, error } = await supabase
      .from("transactions")
      .select("*")
      .eq("user_id", user.id);
      
    if (error) throw error;
    if (!transactions || transactions.length === 0) return;
    
    console.log(`Checking ${transactions.length} transactions for duplicates`);
    
    // Track seen transactions and duplicates
    const seen = new Map();
    const duplicateIds: string[] = [];
    
    // Find duplicates
    transactions.forEach(transaction => {
      // Create a unique key for each transaction
      const key = `${transaction.date}|${transaction.description}|${transaction.received_from}|${transaction.payment_type}|${transaction.amount}`;
      
      if (seen.has(key)) {
        // We've seen this transaction before, it's a duplicate
        duplicateIds.push(transaction.id);
      } else {
        // First time seeing this transaction
        seen.set(key, true);
      }
    });
    
    if (duplicateIds.length === 0) {
      console.log("No duplicate transactions found");
      return;
    }
    
    console.log(`Found ${duplicateIds.length} duplicate transactions to remove`);
    
    // Delete the duplicates
    const { error: deleteError } = await supabase
      .from("transactions")
      .delete()
      .in("id", duplicateIds);
      
    if (deleteError) throw deleteError;
    
    console.log(`Successfully removed ${duplicateIds.length} duplicate transactions`);
    return duplicateIds.length;
  } catch (error) {
    console.error("Error removing duplicate transactions:", error);
    toast.error("Erro ao remover transações duplicadas");
    return 0;
  }
};
