// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wgnvrxubwifcscrbkimm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndnbnZyeHVid2lmY3NjcmJraW1tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg1MjYxNzAsImV4cCI6MjA1NDEwMjE3MH0.AwaBd1VRrzz_DvvDjJ3Ke7CJFoxl5XUB2chymhueybg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper to remove duplicate transactions
export const removeDuplicateTransactions = async () => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      console.error("No user found");
      return { removed: 0 };
    }
    
    // First get all transactions
    const { data: allTransactions, error } = await supabase
      .from("transactions")
      .select("*")
      .eq("user_id", user.id)
      .order("date", { ascending: false });
      
    if (error) {
      console.error("Error fetching transactions:", error);
      return { removed: 0 };
    }
    
    if (!allTransactions || allTransactions.length === 0) {
      console.info("No transactions found");
      return { removed: 0 };
    }
    
    // Find duplicates by creating a signature for each transaction
    const seen = new Map();
    const duplicates = [];
    
    for (const transaction of allTransactions) {
      // Create a unique signature for the transaction based on key properties
      const signature = `${transaction.date}|${transaction.description}|${transaction.received_from}|${transaction.payment_type}|${transaction.amount}`;
      
      if (seen.has(signature)) {
        // This is a duplicate, keep the one we've already seen and mark this for deletion
        duplicates.push(transaction.id);
      } else {
        seen.set(signature, transaction.id);
      }
    }
    
    console.info(`Found ${duplicates.length} duplicate transactions`);
    
    // Delete duplicates if any were found
    if (duplicates.length > 0) {
      const { error: deleteError } = await supabase
        .from("transactions")
        .delete()
        .in("id", duplicates);
        
      if (deleteError) {
        console.error("Error deleting duplicates:", deleteError);
        return { removed: 0 };
      }
    }
    
    console.info(`Removed ${duplicates.length} duplicate transactions`);
    return { removed: duplicates.length };
  } catch (error) {
    console.error("Error in removeDuplicateTransactions:", error);
    return { removed: 0 };
  }
};
