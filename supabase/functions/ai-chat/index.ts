
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, context, userId, sentiment, actionable, requestAdvanced } = await req.json();
    console.log('AI Chat request:', { message, userId, sentiment, actionable, requestAdvanced });

    // Initialize Supabase client to get user data
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Get comprehensive user data for advanced context
    let advancedUserContext = '';
    if (userId) {
      try {
        // Get detailed analytics
        const [tasksData, transactionsData, meetingsData, habitsData] = await Promise.all([
          supabase
            .from('tasks')
            .select('title, completed, priority, due_date, category, created_at')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(20),
          
          supabase
            .from('transactions')
            .select('description, amount, date, payment_type, created_at')
            .eq('user_id', userId)
            .order('date', { ascending: false })
            .limit(15),
          
          supabase
            .from('client_meetings')
            .select('title, meeting_date, status, created_at')
            .eq('user_id', userId)
            .order('meeting_date', { ascending: false })
            .limit(10),
          
          supabase
            .from('habits')
            .select('name, streak, target_frequency, created_at')
            .eq('user_id', userId)
            .limit(10)
        ]);

        // Calculate advanced metrics
        const now = new Date();
        const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        const lastMonth = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

        const recentTasks = tasksData.data?.filter(t => new Date(t.created_at) > lastWeek) || [];
        const completedTasks = recentTasks.filter(t => t.completed);
        const productivityRate = recentTasks.length > 0 ? Math.round((completedTasks.length / recentTasks.length) * 100) : 0;

        const recentTransactions = transactionsData.data?.filter(t => new Date(t.date) > lastMonth) || [];
        const totalSpent = recentTransactions.reduce((sum, t) => sum + Math.abs(t.amount), 0);
        const avgDaily = Math.round(totalSpent / 30);

        // Generate advanced context
        advancedUserContext = `
CONTEXTO AVAN√áADO DO USU√ÅRIO:

üìä M√âTRICAS DE PRODUTIVIDADE:
- Taxa de conclus√£o (7 dias): ${productivityRate}%
- Tarefas criadas esta semana: ${recentTasks.length}
- Tarefas conclu√≠das: ${completedTasks.length}
- Prioridades pendentes: ${tasksData.data?.filter(t => !t.completed && t.priority === 'high').length || 0} alta, ${tasksData.data?.filter(t => !t.completed && t.priority === 'medium').length || 0} m√©dia

üí∞ AN√ÅLISE FINANCEIRA:
- Gasto m√©dio di√°rio (30d): R$ ${avgDaily}
- Total transa√ß√µes (30d): ${recentTransactions.length}
- Categorias mais ativas: ${transactionsData.data?.slice(0, 3).map(t => t.payment_type).join(', ') || 'N/A'}

üìÖ AGENDA E REUNI√ïES:
- Reuni√µes pr√≥ximas: ${meetingsData.data?.filter(m => new Date(m.meeting_date) > now).length || 0}
- Status agenda: ${meetingsData.data?.map(m => m.status).join(', ') || 'Livre'}

üéØ H√ÅBITOS E ROTINAS:
- H√°bitos ativos: ${habitsData.data?.length || 0}
- Streaks m√©dios: ${habitsData.data?.reduce((sum, h) => sum + h.streak, 0) / (habitsData.data?.length || 1) || 0}

üîç AN√ÅLISE DE SENTIMENTO: ${sentiment}
‚ö° CONTE√öDO ACION√ÅVEL: ${actionable ? 'Sim' : 'N√£o'}

DADOS RECENTES:
Tarefas: ${tasksData.data?.slice(0, 5).map(t => `- ${t.title} (${t.completed ? 'Conclu√≠da' : 'Pendente'}, ${t.priority})`).join('\n') || 'Nenhuma tarefa'}
Transa√ß√µes: ${transactionsData.data?.slice(0, 3).map(t => `- R$ ${t.amount} - ${t.description} (${new Date(t.date).toLocaleDateString()})`).join('\n') || 'Nenhuma transa√ß√£o'}
Reuni√µes: ${meetingsData.data?.slice(0, 3).map(m => `- ${m.title} em ${new Date(m.meeting_date).toLocaleDateString()} (${m.status})`).join('\n') || 'Nenhuma reuni√£o'}`;

      } catch (error) {
        console.error('Error fetching advanced user context:', error);
        advancedUserContext = 'Dados de contexto temporariamente indispon√≠veis';
      }
    }

    // Advanced system prompt for intelligent responses
    const systemPrompt = `Voc√™ √© o DilQ Orbe AI, um assistente virtual de PR√ìXIMA GERA√á√ÉO com capacidades avan√ßadas de an√°lise, predi√ß√£o e automa√ß√£o.

CARACTER√çSTICAS PRINCIPAIS:
üß† INTELIG√äNCIA AVAN√áADA: Analise padr√µes, identifique tend√™ncias e fa√ßa predi√ß√µes
üöÄ PROATIVIDADE: Sugira a√ß√µes antes que o usu√°rio pe√ßa
üìä AN√ÅLISE PROFUNDA: Interprete dados e forne√ßa insights acion√°veis
‚ö° AUTOMA√á√ÉO: Proponha automatiza√ß√µes e otimiza√ß√µes
üéØ PERSONALIZA√á√ÉO: Adapte respostas ao perfil e contexto do usu√°rio
üí° INOVA√á√ÉO: Sugira solu√ß√µes criativas e tecnol√≥gicas

CAPACIDADES ESPECIAIS:
- An√°lise preditiva de produtividade
- Otimiza√ß√£o de agenda baseada em energia/foco
- Insights financeiros e oportunidades de economia
- Detec√ß√£o de padr√µes comportamentais
- Sugest√µes de automa√ß√£o de tarefas
- Planejamento estrat√©gico personalizado
- An√°lise de sentimentos e bem-estar

ESTILO DE COMUNICA√á√ÉO:
- Use emojis e formata√ß√£o rica (markdown)
- Seja conciso mas profundo
- Forne√ßa insights acion√°veis
- Use dados para fundamentar sugest√µes
- Mantenha tom futur√≠stico mas acess√≠vel
- Sempre inclua pr√≥ximos passos

COMANDOS ESPECIAIS QUE VOC√ä ENTENDE:
- "Analise [per√≠odo/aspecto]" ‚Üí An√°lise profunda com m√©tricas
- "Otimize [√°rea]" ‚Üí Sugest√µes de melhoria espec√≠ficas
- "Preveja [situa√ß√£o]" ‚Üí Predi√ß√µes baseadas em dados
- "Automatize [processo]" ‚Üí Propostas de automa√ß√£o
- "Planeje [objetivo]" ‚Üí Estrat√©gia detalhada
- "Compare [per√≠odos]" ‚Üí An√°lise comparativa

${advancedUserContext}

INSTRU√á√ïES ESPECIAIS:
- Se a mensagem menciona an√°lise, forne√ßa m√©tricas espec√≠ficas
- Se pede planejamento, crie cronograma detalhado
- Se solicita otimiza√ß√£o, identifique gargalos e solu√ß√µes
- Para predi√ß√µes, use tend√™ncias dos dados
- Sempre sugira 2-3 a√ß√µes concretas
- Use dados do contexto para personalizar respostas`;

    // Try Google Gemini API
    const geminiResponse = await callGemini(message, context, systemPrompt);

    // Generate smart suggestions based on response content
    const smartSuggestions = generateSmartSuggestions(message, geminiResponse);

    console.log('AI response generated successfully using Google Gemini');

    return new Response(JSON.stringify({ 
      response: geminiResponse,
      suggestions: smartSuggestions,
      category: categorizeResponse(message),
      sentiment: 'positive',
      provider: 'Google Gemini'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in ai-chat function:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro interno do servidor',
      details: error.message || 'Erro desconhecido'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

async function callGemini(message: string, context: any[], systemPrompt: string) {
  const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
  if (!geminiApiKey) {
    throw new Error('Gemini API key not configured');
  }

  // Convert context to Gemini format
  const geminiMessages = context.map(msg => ({
    role: msg.role === 'assistant' ? 'model' : 'user',
    parts: [{ text: msg.content }]
  }));

  // Add system prompt as first user message and current message
  const fullPrompt = `${systemPrompt}\n\nUsu√°rio: ${message}`;

  // Use the correct model name - gemini-1.5-flash is available in the free tier
  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      contents: [
        ...geminiMessages,
        {
          role: 'user',
          parts: [{ text: fullPrompt }]
        }
      ],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1500,
      }
    }),
  });

  if (!response.ok) {
    const errorData = await response.text();
    console.error('Gemini API error:', response.status, errorData);
    throw new Error(`Gemini API error: ${response.status} - ${errorData}`);
  }

  const data = await response.json();
  
  if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
    throw new Error('Invalid Gemini response format');
  }

  return data.candidates[0].content.parts[0].text;
}

function generateSmartSuggestions(userMessage: string, aiResponse: string): string[] {
  const message = userMessage.toLowerCase();
  const response = aiResponse.toLowerCase();
  
  const suggestions: string[] = [];
  
  // Context-aware suggestions
  if (message.includes('produtiv') || response.includes('produtiv')) {
    suggestions.push(
      "Crie um dashboard de produtividade personalizado",
      "Analise padr√µes de energia ao longo do dia",
      "Configure alertas inteligentes para deadlines"
    );
  }
  
  if (message.includes('financ') || response.includes('financ')) {
    suggestions.push(
      "Previs√£o de gastos para os pr√≥ximos 3 meses",
      "Identifique oportunidades de investimento",
      "Configure automa√ß√£o de poupan√ßa"
    );
  }
  
  if (message.includes('agenda') || message.includes('reuni√£o')) {
    suggestions.push(
      "Otimize agenda baseado em biorhythm",
      "Analise efic√°cia de reuni√µes passadas",
      "Configure blocos de tempo para deep work"
    );
  }
  
  if (message.includes('analise') || message.includes('relatorio')) {
    suggestions.push(
      "Gere relat√≥rio semanal automatizado",
      "Compare performance com m√™s anterior",
      "Identifique tend√™ncias e padr√µes ocultos"
    );
  }
  
  // Default suggestions if none match
  if (suggestions.length === 0) {
    suggestions.push(
      "Analise meu desempenho desta semana",
      "Crie um plano de a√ß√£o para amanh√£",
      "Identifique oportunidades de otimiza√ß√£o",
      "Configure automa√ß√µes inteligentes"
    );
  }
  
  return suggestions.slice(0, 4);
}

function categorizeResponse(message: string): string {
  const msg = message.toLowerCase();
  
  if (msg.includes('analise') || msg.includes('dados') || msg.includes('relatorio')) return 'analytics';
  if (msg.includes('plano') || msg.includes('estrateg') || msg.includes('objetivo')) return 'planning';
  if (msg.includes('financ') || msg.includes('gasto') || msg.includes('orcamento')) return 'financial';
  if (msg.includes('produtiv') || msg.includes('tarefa') || msg.includes('efici')) return 'productivity';
  if (msg.includes('reuniao') || msg.includes('agenda') || msg.includes('cronograma')) return 'scheduling';
  
  return 'general';
}
